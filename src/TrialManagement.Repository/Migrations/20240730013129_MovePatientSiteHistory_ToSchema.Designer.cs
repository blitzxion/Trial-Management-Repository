// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrialManagement.Repository.Context;

#nullable disable

namespace TrialManagement.Repository.Migrations
{
    [DbContext(typeof(TrialManagementContext))]
    [Migration("20240730013129_MovePatientSiteHistory_ToSchema")]
    partial class MovePatientSiteHistory_ToSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TrialManagement.Repository.Datasets.ClinicalSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicalTrialId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitePrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalTrialId");

                    b.ToTable("ClinicalSites", "TrialManagement");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.ClinicalTrial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ClinicalTrials", "TrialManagement");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", "TrialManagement");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicalTrialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentClinicalSiteId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalTrialId");

                    b.HasIndex("CurrentClinicalSiteId");

                    b.ToTable("Patients", "TrialManagement");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.PatientDataFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDataFiles", "TrialManagement");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.PatientSiteHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicalSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("EndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalSiteId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientSiteHistories", "TrialManagement");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.ClinicalSite", b =>
                {
                    b.HasOne("TrialManagement.Repository.Datasets.ClinicalTrial", "ClinicalTrial")
                        .WithMany("ClinicalSites")
                        .HasForeignKey("ClinicalTrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicalTrial");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.ClinicalTrial", b =>
                {
                    b.HasOne("TrialManagement.Repository.Datasets.Organization", "Organization")
                        .WithMany("ClinicalTrials")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.Patient", b =>
                {
                    b.HasOne("TrialManagement.Repository.Datasets.ClinicalTrial", "ClinicalTrial")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicalTrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrialManagement.Repository.Datasets.ClinicalSite", "CurrentClinicalSite")
                        .WithMany("Patients")
                        .HasForeignKey("CurrentClinicalSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClinicalTrial");

                    b.Navigation("CurrentClinicalSite");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.PatientDataFile", b =>
                {
                    b.HasOne("TrialManagement.Repository.Datasets.Patient", "Patient")
                        .WithMany("PatientDataFiles")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.PatientSiteHistory", b =>
                {
                    b.HasOne("TrialManagement.Repository.Datasets.ClinicalSite", "ClinicalSite")
                        .WithMany()
                        .HasForeignKey("ClinicalSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrialManagement.Repository.Datasets.Patient", "Patient")
                        .WithMany("PatientSiteHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClinicalSite");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.ClinicalSite", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.ClinicalTrial", b =>
                {
                    b.Navigation("ClinicalSites");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.Organization", b =>
                {
                    b.Navigation("ClinicalTrials");
                });

            modelBuilder.Entity("TrialManagement.Repository.Datasets.Patient", b =>
                {
                    b.Navigation("PatientDataFiles");

                    b.Navigation("PatientSiteHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
